USE GLOBAL
DROP GRAPH Recommendations

CREATE GRAPH Recommendations()
USE GRAPH Recommendations

CREATE SCHEMA_CHANGE JOB recommendation_change_job FOR GRAPH Recommendations {
	CREATE VERTEX Person(PRIMARY_ID id STRING, first_name STRING, last_name STRING, age STRING, gender STRING, language STRING) WITH STATS="OUTDEGREE_BY_EDGETYPE", PRIMARY_ID_AS_ATTRIBUTE="true";
	CREATE VERTEX Movie(PRIMARY_ID movieId STRING, title STRING, genres STRING) WITH STATS="OUTDEGREE_BY_EDGETYPE", PRIMARY_ID_AS_ATTRIBUTE="true";
	CREATE VERTEX TitleBasics(PRIMARY_ID tconst STRING, titleType STRING, primaryTitle STRING, originalTitle STRING, isAdult STRING, startYear STRING, endYear STRING, runtimeMinutes STRING, genres STRING) WITH STATS="OUTDEGREE_BY_EDGETYPE", PRIMARY_ID_AS_ATTRIBUTE="true";
	CREATE VERTEX Tag(PRIMARY_ID userId STRING, movieId STRING, tag STRING, timestamp STRING) WITH STATS="OUTDEGREE_BY_EDGETYPE", PRIMARY_ID_AS_ATTRIBUTE="true";
	CREATE VERTEX Video(PRIMARY_ID ID STRING, runtime STRING, title STRING, release_date STRING) WITH STATS="OUTDEGREE_BY_EDGETYPE", PRIMARY_ID_AS_ATTRIBUTE="true";
	CREATE VERTEX VideoGenre(PRIMARY_ID videoId STRING, genre STRING) WITH STATS="OUTDEGREE_BY_EDGETYPE", PRIMARY_ID_AS_ATTRIBUTE="true";
	CREATE VERTEX VideoPlay(PRIMARY_ID id STRING, account STRING, video STRING, play_date STRING, play_duration STRING) WITH STATS="OUTDEGREE_BY_EDGETYPE", PRIMARY_ID_AS_ATTRIBUTE="true";
				

	CREATE UNDIRECTED EDGE goesTo(FROM Person, TO Movie);
	CREATE UNDIRECTED EDGE movie_has_tag(FROM Movie, TO Tag);
	CREATE UNDIRECTED EDGE isA(FROM Movie, TO Video);
	CREATE UNDIRECTED EDGE hasA(FROM Video, TO VideoGenre);
	CREATE UNDIRECTED EDGE hasDetail(FROM Movie, TO TitleBasics);
	CREATE UNDIRECTED EDGE playsA(FROM Person, TO VideoPlay);
}

RUN SCHEMA_CHANGE JOB recommendation_change_job
DROP JOB recommendation_change_job